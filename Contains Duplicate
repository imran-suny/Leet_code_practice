Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:22
Input: nums = [1,2,3,4]
Output: false
Brute_force
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        n = len(nums)
        for i in range(n - 1):
            for j in range(i + 1, n):
                if nums[i] == nums[j]:
                    return True
        return False
The time complexity of this approach is O(n^2)

sorting  O(nlongn)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort()
        n = len(nums)
        for i in range(1, n):
            if nums[i] == nums[i - 1]:
                return True
        return False

Approach 3: Hash Set O(n)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        seen = set()  #### create unique element 
        for num in nums:
            if num in seen:
                return True
            seen.add(num) # add korte hobe set a 
        return False

# set() is a built-in data type and function that is used to create a collection of unique elements. Sets are similar to lists, but they don't allow duplicate values
# my_list = [1, 2, 2, 3, 4, 4, 5]
# my_set = set(my_list)
# print(my_set)  # Output: {1, 2, 3, 4, 5}


Approach 4: Hash Map O(n)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        seen = {} # dict 
        for num in nums:
            if num in seen and seen[num] >= 1:
                return True
            seen[num] = seen.get(num, 0) + 1  # retrieves the value associated with the key num from the seen. If the key is not present in the dictionary, it returns 0 and increse 1
        return False

# get() method is used with dictionaries to retrieve the value associated with a given key.
# seen.get(num, 0) + 1 adds 1 to the count retrieved from the dictionary. This effectively increments the count for the current element. 
If num is not in the dictionary, it creates a new key-value pair with num as the key and a count of 1.

numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
seen = {}
for num in numbers:
    seen[num] = seen.get(num, 0) + 1
print(seen)  # Output: {1: 1, 2: 2, 3: 3, 4: 4}
